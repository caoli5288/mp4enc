#!/bin/bash

OPT="ab:c:n:i:p:t:q:o:s:"
OPT_LONG="crf:,preset:,tune:,size:,test,codec:"

if [[ ! $@ ]]; then
    echo './mp4enc [option]... -i <input> [-o <output>]'
    echo '    -a           The audio stream will not be encoded(copy direct).'
    echo '    -b           The video bitrate value. Syntax like "1536k".'
    echo '    -c, --crf    The video CRF value. A float like 25(default).'
    echo '        --codec  What library used to encode vedio(libx264 default).'
    echo '    -n           The video noise reduce. Valid rage 0-10000.'
    echo '    -p, --preset The video encoder preset. It can be ultrafast,'
    echo '                 superfast, veryfast, faster, fast,'
    echo '                 medium(libx265 default), slow, slower(default),'
    echo '                 veryslow and placebo.'
    echo '    -q           The audio target quality(default 0.3).'
    echo '    -s, --size   The video size. Syntax like "800x600".'
    echo '    -t, --tune   The video encoder tune. It can be film, animation,'
    echo '                 grain, stillimage, psnr, ssim, fastdecode,'
    echo '                 zerolatency and touhou(default none).'
    echo '        --test   Test the first 30s stream(s).'
    echo ''
    echo 'The encoder will work on CRF mode if bitrate not set.'
    echo 'More info on https://github.com/caoli5288/mp4enc.'
else
    set -- `getopt -q -u -o $OPT --long $OPT_LONG -n 'mp4enc' -- $@`
fi

FFMPEG=$(which ffmpeg 2> /dev/null)
NEROAE=$(which neroAacEnc 2> /dev/null)

if [ ! $FFMPEG ]; then
  echo FFmpeg NOT found!
  exit 3
fi

while [[ $@ ]]; do
    case $1 in
    -a)
        ACOPY=1
        shift 1
        ;;
    -o)
        OUTPUT=$2
        shift 2
        ;;
    -q)
        QUALITY=$2
        shift 2
        ;;
    -c|--crf)
        CRF=$2
        shift 2
        ;;
    -b)
        BITRATE=$2
        shift 2
        ;;
    -i)
        INPUT=$2
        shift 2
        ;;
    -p|--preset)
        PRESET=$2
        shift 2
        ;;
    -n)
        NOISE=$2
        shift 2
        ;;
    -s|--size)
        SIZE=$2
        shift 2
        ;;
    -t|--tune)
        TUNE=$2
        shift 2
        ;;
    --test)
        TEST=TRUE
        shift 1
        ;;
    --codec)
        CODEC=$2
        shift 2
        ;;
    --)
        shift 1
        ;;
    *)
        shift 1
        ;;
    esac
done

if [ ! $INPUT ] || [ ! -f $INPUT ]; then
    echo 'You must specify a input file!'
    exit '3'
fi

STAMP=$(date +%s)

# Temp file clean up.
trap "rm -f .$STAMP.*" EXIT

if [ $BITRATE ]; then
    ffmpeg -i $INPUT \
        -an ${TEST:+-t 00:00:30} ${SIZE:+-s $SIZE} ${NOISE:+-vf hqdn3d=$NOISE} \
        -pass 1 \
        -b $BITRATE \
        -vcodec ${CODEC:-'libx264'} \
        -passlogfile .$STAMP.log ${TUNE:+-tune $TUNE} \
        -f rawvideo -y /dev/null || exit 5
    ffmpeg -i $INPUT \
        -an ${TEST:+-t 00:00:30} ${SIZE:+-s $SIZE} ${NOISE:+-vf hqdn3d=$NOISE} \
        -pass 2 \
        -b $BITRATE \
        -vcodec ${CODEC:-'libx264'} \
        -passlogfile .$STAMP.log ${TUNE:+-tune $TUNE} \
        -preset ${PRESET:-'slower'} .$STAMP.mp4 || exit 5
else
    ffmpeg -i $INPUT \
        -an ${TEST:+-t 00:00:30} ${SIZE:+-s $SIZE} ${NOISE:+-vf hqdn3d=$NOISE} \
        -vcodec ${CODEC:-'libx264'} \
        -crf ${CRF:-'25'} \
        -preset ${PRESET:-'slower'} ${TUNE:+-tune $TUNE} .$STAMP.mp4 || exit 5
fi

function _audio_enc_nero() {
    neroAacEnc -q ${QUALITY:-'0.3'} -ignorelength -if - -of .$STAMP.m4a
}

# Encode audio stream with nero's aac encoder.
if [ $ACOPY ]; then
    ffmpeg -i $INPUT -vn ${TEST:+-t 00:00:30} -acodec copy .$STAMP.m4a
else
    if [ $NEROAE ]; then
        ffmpeg -i $INPUT -vn ${TEST:+-t 00:00:30} -f wav - | _audio_enc_nero
    else
        ffmpeg -i $INPUT -vn ${TEST:+-t 00:00:30} -acodec aac .$STAMP.m4a
    fi
fi

if [ -z $OUTPUT ]; then
    OUTPUT=${INPUT%\.*}.mp4
fi

if [ -f $OUTPUT ]; then
    mv $OUTPUT $OUTPUT.backup
fi

# Mix video and audio stream(s).
if [ -f .$STAMP.m4a ]; then
    ffmpeg -i .$STAMP.mp4 -i .$STAMP.m4a -vcodec copy -acodec copy $OUTPUT
else
    ffmpeg -i .$STAMP.mp4 -vcodec copy $OUTPUT
fi
